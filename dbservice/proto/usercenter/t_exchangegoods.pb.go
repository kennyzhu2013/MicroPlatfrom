// Code generated by protoc-gen-go. DO NOT EDIT.
// source: usercenter/t_exchangegoods.proto

package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TExchangeGoods struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GoodsName            string               `protobuf:"bytes,3,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	Type                 string               `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Status               string               `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	TotalNum             string               `protobuf:"bytes,6,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	CurrentNum           string               `protobuf:"bytes,7,opt,name=current_num,json=currentNum,proto3" json:"current_num,omitempty"`
	DayCurrentNum        string               `protobuf:"bytes,8,opt,name=day_current_num,json=dayCurrentNum,proto3" json:"day_current_num,omitempty"`
	EqualScore           string               `protobuf:"bytes,9,opt,name=equal_score,json=equalScore,proto3" json:"equal_score,omitempty"`
	DayLimit             string               `protobuf:"bytes,10,opt,name=day_limit,json=dayLimit,proto3" json:"day_limit,omitempty"`
	PersonLimit          string               `protobuf:"bytes,11,opt,name=person_limit,json=personLimit,proto3" json:"person_limit,omitempty"`
	MemberGrade          string               `protobuf:"bytes,12,opt,name=member_grade,json=memberGrade,proto3" json:"member_grade,omitempty"`
	Sort                 string               `protobuf:"bytes,13,opt,name=sort,proto3" json:"sort,omitempty"`
	ImgUrl               string               `protobuf:"bytes,14,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
	CreateDate           *timestamp.Timestamp `protobuf:"bytes,15,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	OperateDate          *timestamp.Timestamp `protobuf:"bytes,16,opt,name=operate_date,json=operateDate,proto3" json:"operate_date,omitempty"`
	Descs                string               `protobuf:"bytes,17,opt,name=descs,proto3" json:"descs,omitempty"`
	ProductCode          string               `protobuf:"bytes,18,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	Vid                  string               `protobuf:"bytes,19,opt,name=vid,proto3" json:"vid,omitempty"`
	WarnThreshold        string               `protobuf:"bytes,20,opt,name=warn_threshold,json=warnThreshold,proto3" json:"warn_threshold,omitempty"`
	LinkUrl              string               `protobuf:"bytes,21,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
	ExpireDate           *timestamp.Timestamp `protobuf:"bytes,22,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	ContentId            string               `protobuf:"bytes,23,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	FlowProductType      string               `protobuf:"bytes,24,opt,name=flow_product_type,json=flowProductType,proto3" json:"flow_product_type,omitempty"`
	ValidStartDate       *timestamp.Timestamp `protobuf:"bytes,25,opt,name=valid_start_date,json=validStartDate,proto3" json:"valid_start_date,omitempty"`
	EqualMcoin           string               `protobuf:"bytes,26,opt,name=equal_mcoin,json=equalMcoin,proto3" json:"equal_mcoin,omitempty"`
	Cycle                string               `protobuf:"bytes,27,opt,name=cycle,proto3" json:"cycle,omitempty"`
	PersonDayLimit       string               `protobuf:"bytes,28,opt,name=person_day_limit,json=personDayLimit,proto3" json:"person_day_limit,omitempty"`
	PersonWeekLimit      string               `protobuf:"bytes,29,opt,name=person_week_limit,json=personWeekLimit,proto3" json:"person_week_limit,omitempty"`
	PersonMonthLimit     string               `protobuf:"bytes,30,opt,name=person_month_limit,json=personMonthLimit,proto3" json:"person_month_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TExchangeGoods) Reset()         { *m = TExchangeGoods{} }
func (m *TExchangeGoods) String() string { return proto.CompactTextString(m) }
func (*TExchangeGoods) ProtoMessage()    {}
func (*TExchangeGoods) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_exchangegoods_067da046c4bc5171, []int{0}
}
func (m *TExchangeGoods) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TExchangeGoods.Unmarshal(m, b)
}
func (m *TExchangeGoods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TExchangeGoods.Marshal(b, m, deterministic)
}
func (dst *TExchangeGoods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TExchangeGoods.Merge(dst, src)
}
func (m *TExchangeGoods) XXX_Size() int {
	return xxx_messageInfo_TExchangeGoods.Size(m)
}
func (m *TExchangeGoods) XXX_DiscardUnknown() {
	xxx_messageInfo_TExchangeGoods.DiscardUnknown(m)
}

var xxx_messageInfo_TExchangeGoods proto.InternalMessageInfo

func (m *TExchangeGoods) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TExchangeGoods) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TExchangeGoods) GetGoodsName() string {
	if m != nil {
		return m.GoodsName
	}
	return ""
}

func (m *TExchangeGoods) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TExchangeGoods) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TExchangeGoods) GetTotalNum() string {
	if m != nil {
		return m.TotalNum
	}
	return ""
}

func (m *TExchangeGoods) GetCurrentNum() string {
	if m != nil {
		return m.CurrentNum
	}
	return ""
}

func (m *TExchangeGoods) GetDayCurrentNum() string {
	if m != nil {
		return m.DayCurrentNum
	}
	return ""
}

func (m *TExchangeGoods) GetEqualScore() string {
	if m != nil {
		return m.EqualScore
	}
	return ""
}

func (m *TExchangeGoods) GetDayLimit() string {
	if m != nil {
		return m.DayLimit
	}
	return ""
}

func (m *TExchangeGoods) GetPersonLimit() string {
	if m != nil {
		return m.PersonLimit
	}
	return ""
}

func (m *TExchangeGoods) GetMemberGrade() string {
	if m != nil {
		return m.MemberGrade
	}
	return ""
}

func (m *TExchangeGoods) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *TExchangeGoods) GetImgUrl() string {
	if m != nil {
		return m.ImgUrl
	}
	return ""
}

func (m *TExchangeGoods) GetCreateDate() *timestamp.Timestamp {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

func (m *TExchangeGoods) GetOperateDate() *timestamp.Timestamp {
	if m != nil {
		return m.OperateDate
	}
	return nil
}

func (m *TExchangeGoods) GetDescs() string {
	if m != nil {
		return m.Descs
	}
	return ""
}

func (m *TExchangeGoods) GetProductCode() string {
	if m != nil {
		return m.ProductCode
	}
	return ""
}

func (m *TExchangeGoods) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *TExchangeGoods) GetWarnThreshold() string {
	if m != nil {
		return m.WarnThreshold
	}
	return ""
}

func (m *TExchangeGoods) GetLinkUrl() string {
	if m != nil {
		return m.LinkUrl
	}
	return ""
}

func (m *TExchangeGoods) GetExpireDate() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireDate
	}
	return nil
}

func (m *TExchangeGoods) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *TExchangeGoods) GetFlowProductType() string {
	if m != nil {
		return m.FlowProductType
	}
	return ""
}

func (m *TExchangeGoods) GetValidStartDate() *timestamp.Timestamp {
	if m != nil {
		return m.ValidStartDate
	}
	return nil
}

func (m *TExchangeGoods) GetEqualMcoin() string {
	if m != nil {
		return m.EqualMcoin
	}
	return ""
}

func (m *TExchangeGoods) GetCycle() string {
	if m != nil {
		return m.Cycle
	}
	return ""
}

func (m *TExchangeGoods) GetPersonDayLimit() string {
	if m != nil {
		return m.PersonDayLimit
	}
	return ""
}

func (m *TExchangeGoods) GetPersonWeekLimit() string {
	if m != nil {
		return m.PersonWeekLimit
	}
	return ""
}

func (m *TExchangeGoods) GetPersonMonthLimit() string {
	if m != nil {
		return m.PersonMonthLimit
	}
	return ""
}

func init() {
	proto.RegisterType((*TExchangeGoods)(nil), "usercenter.TExchangeGoods")
}

func init() {
	proto.RegisterFile("usercenter/t_exchangegoods.proto", fileDescriptor_t_exchangegoods_067da046c4bc5171)
}

var fileDescriptor_t_exchangegoods_067da046c4bc5171 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4f, 0x1b, 0x3d,
	0x10, 0xc6, 0xc5, 0xbf, 0x90, 0x4c, 0x20, 0x04, 0xbf, 0xbc, 0x60, 0xa0, 0x14, 0x5a, 0xa9, 0x15,
	0x42, 0x55, 0x22, 0xb5, 0x47, 0xd4, 0x4b, 0xa1, 0x42, 0x95, 0x0a, 0xaa, 0x20, 0x55, 0xa5, 0x5e,
	0x56, 0xce, 0x7a, 0xd8, 0x58, 0xac, 0xd7, 0x5b, 0xdb, 0x0b, 0xe4, 0x1b, 0xf5, 0x63, 0x56, 0x1e,
	0x3b, 0x84, 0x1b, 0x37, 0xfb, 0x79, 0x7e, 0x63, 0x8f, 0x1f, 0x0f, 0x1c, 0x35, 0x0e, 0x6d, 0x8e,
	0x95, 0x47, 0x3b, 0xf4, 0x19, 0x3e, 0xe6, 0x13, 0x51, 0x15, 0x58, 0x18, 0x23, 0xdd, 0xa0, 0xb6,
	0xc6, 0x1b, 0x06, 0x73, 0x62, 0xef, 0xb4, 0x50, 0x7e, 0xd2, 0x8c, 0x07, 0xb9, 0xd1, 0xc3, 0xc2,
	0x94, 0xa2, 0x2a, 0x86, 0x04, 0x8d, 0x9b, 0xdb, 0x61, 0xed, 0xa7, 0x35, 0xba, 0xa1, 0x57, 0x1a,
	0x9d, 0x17, 0xba, 0x9e, 0xaf, 0xe2, 0x41, 0x6f, 0xff, 0xb6, 0xa1, 0x37, 0xfa, 0x9a, 0x6e, 0xb8,
	0x08, 0x37, 0xb0, 0x1e, 0x2c, 0x2a, 0xc9, 0x17, 0x8e, 0x16, 0x8e, 0x3b, 0xd7, 0x8b, 0x4a, 0x32,
	0x06, 0xcb, 0x95, 0xd0, 0xc8, 0x17, 0x49, 0xa1, 0x35, 0x3b, 0x00, 0xa0, 0x76, 0x32, 0x72, 0x96,
	0xc8, 0xe9, 0x90, 0x72, 0x15, 0x6c, 0x06, 0xcb, 0xe1, 0x62, 0xbe, 0x1c, 0x4b, 0xc2, 0x9a, 0x6d,
	0x43, 0xcb, 0x79, 0xe1, 0x1b, 0xc7, 0x57, 0x48, 0x4d, 0x3b, 0xb6, 0x0f, 0x1d, 0x6f, 0xbc, 0x28,
	0xb3, 0xaa, 0xd1, 0xbc, 0x45, 0x56, 0x9b, 0x84, 0xab, 0x46, 0xb3, 0x43, 0xe8, 0xe6, 0x8d, 0xb5,
	0x58, 0x79, 0xb2, 0x57, 0xc9, 0x86, 0x24, 0x05, 0xe0, 0x3d, 0x6c, 0x48, 0x31, 0xcd, 0x9e, 0x43,
	0x6d, 0x82, 0xd6, 0xa5, 0x98, 0x9e, 0xcd, 0xb9, 0x43, 0xe8, 0xe2, 0x9f, 0x46, 0x94, 0x99, 0xcb,
	0x8d, 0x45, 0xde, 0x89, 0x07, 0x91, 0x74, 0x13, 0x94, 0xd0, 0x46, 0x38, 0xa8, 0x54, 0x5a, 0x79,
	0x0e, 0xb1, 0x0d, 0x29, 0xa6, 0xdf, 0xc3, 0x9e, 0xbd, 0x81, 0xb5, 0x1a, 0xad, 0x33, 0x55, 0xf2,
	0xbb, 0xe4, 0x77, 0xa3, 0xf6, 0x84, 0x68, 0xd4, 0x63, 0xb4, 0x59, 0x61, 0x85, 0x44, 0xbe, 0x16,
	0x91, 0xa8, 0x5d, 0x04, 0x29, 0xa4, 0xe2, 0x8c, 0xf5, 0x7c, 0x3d, 0xa6, 0x12, 0xd6, 0x6c, 0x07,
	0x56, 0x95, 0x2e, 0xb2, 0xc6, 0x96, 0xbc, 0x17, 0x63, 0x51, 0xba, 0xf8, 0x69, 0x4b, 0x76, 0x0a,
	0xdd, 0xdc, 0xa2, 0xf0, 0x98, 0x49, 0xe1, 0x91, 0x6f, 0x1c, 0x2d, 0x1c, 0x77, 0x3f, 0xee, 0x0d,
	0x0a, 0x63, 0x8a, 0x12, 0x07, 0xb3, 0x0f, 0x1e, 0x8c, 0x66, 0xff, 0x79, 0x0d, 0x11, 0x3f, 0x17,
	0x1e, 0xd9, 0x67, 0x58, 0x33, 0x35, 0xda, 0xa7, 0xea, 0xfe, 0x8b, 0xd5, 0xdd, 0xc4, 0x53, 0xf9,
	0x16, 0xac, 0x48, 0x74, 0xb9, 0xe3, 0x9b, 0xd4, 0x52, 0xdc, 0x50, 0x08, 0xd6, 0xc8, 0x26, 0xf7,
	0x59, 0x6e, 0x24, 0x72, 0x96, 0x42, 0x88, 0xda, 0x99, 0x91, 0xc8, 0xfa, 0xb0, 0x74, 0xaf, 0x24,
	0xff, 0x8f, 0x9c, 0xb0, 0x64, 0xef, 0xa0, 0xf7, 0x20, 0x6c, 0x95, 0xf9, 0x89, 0x45, 0x37, 0x31,
	0xa5, 0xe4, 0x5b, 0xf1, 0x7b, 0x82, 0x3a, 0x9a, 0x89, 0x6c, 0x17, 0xda, 0xa5, 0xaa, 0xee, 0x28,
	0x87, 0xff, 0x09, 0x58, 0x0d, 0xfb, 0x14, 0x04, 0x3e, 0xd6, 0xca, 0xa6, 0xa7, 0x6c, 0xbf, 0x1c,
	0x44, 0xc4, 0xe9, 0x25, 0x07, 0x00, 0xb9, 0xa9, 0x7c, 0x18, 0x0d, 0x25, 0xf9, 0x4e, 0x9c, 0xd3,
	0xa4, 0x7c, 0x93, 0xec, 0x04, 0x36, 0x6f, 0x4b, 0xf3, 0x90, 0xcd, 0xde, 0x45, 0x43, 0xcb, 0x89,
	0xda, 0x08, 0xc6, 0x8f, 0xa8, 0x8f, 0xc2, 0xfc, 0x9e, 0x43, 0xff, 0x5e, 0x94, 0x4a, 0x66, 0xce,
	0x0b, 0xeb, 0x63, 0x33, 0xbb, 0x2f, 0x36, 0xd3, 0xa3, 0x9a, 0x9b, 0x50, 0x42, 0x0d, 0x3d, 0xcd,
	0xa1, 0xce, 0x8d, 0xaa, 0xf8, 0xde, 0xb3, 0x39, 0xbc, 0x0c, 0x4a, 0xc8, 0x3e, 0x9f, 0xe6, 0x25,
	0xf2, 0xfd, 0x98, 0x3d, 0x6d, 0xd8, 0x31, 0xf4, 0xd3, 0x00, 0xce, 0x87, 0xf4, 0x15, 0x01, 0xbd,
	0xa8, 0x9f, 0xcf, 0x46, 0xf5, 0x04, 0x36, 0x13, 0xf9, 0x80, 0x78, 0x97, 0xd0, 0x83, 0xf8, 0xa4,
	0x68, 0xfc, 0x42, 0xbc, 0x8b, 0xec, 0x07, 0x60, 0x89, 0xd5, 0xa6, 0xf2, 0x93, 0x04, 0xbf, 0x26,
	0x38, 0xdd, 0x77, 0x19, 0x0c, 0xa2, 0xbf, 0xb4, 0x7f, 0xb7, 0xb4, 0x91, 0x58, 0xba, 0x71, 0x8b,
	0x1e, 0xfa, 0xe9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x75, 0x67, 0xcb, 0xa8, 0x04, 0x00,
	0x00,
}
