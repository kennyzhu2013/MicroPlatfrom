// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: example.proto

/*
Package go_micro_srv_dbservice is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	Preference
	PreferenceRequest
	PreferenceResponse
	PreferencesListRequest
	PreferencesListResponse
*/
package go_micro_srv_dbservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Preferences service

type PreferencesService interface {
	GetPreference(ctx context.Context, in *PreferenceRequest, opts ...client.CallOption) (*PreferenceResponse, error)
	GetPreferencesList(ctx context.Context, in *PreferencesListRequest, opts ...client.CallOption) (*PreferencesListResponse, error)
}

type preferencesService struct {
	c    client.Client
	name string
}

func NewPreferencesService(name string, c client.Client) PreferencesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.dbservice"
	}
	return &preferencesService{
		c:    c,
		name: name,
	}
}

func (c *preferencesService) GetPreference(ctx context.Context, in *PreferenceRequest, opts ...client.CallOption) (*PreferenceResponse, error) {
	req := c.c.NewRequest(c.name, "Preferences.GetPreference", in)
	out := new(PreferenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferencesService) GetPreferencesList(ctx context.Context, in *PreferencesListRequest, opts ...client.CallOption) (*PreferencesListResponse, error) {
	req := c.c.NewRequest(c.name, "Preferences.GetPreferencesList", in)
	out := new(PreferencesListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Preferences service

type PreferencesHandler interface {
	GetPreference(context.Context, *PreferenceRequest, *PreferenceResponse) error
	GetPreferencesList(context.Context, *PreferencesListRequest, *PreferencesListResponse) error
}

func RegisterPreferencesHandler(s server.Server, hdlr PreferencesHandler, opts ...server.HandlerOption) {
	type preferences interface {
		GetPreference(ctx context.Context, in *PreferenceRequest, out *PreferenceResponse) error
		GetPreferencesList(ctx context.Context, in *PreferencesListRequest, out *PreferencesListResponse) error
	}
	type Preferences struct {
		preferences
	}
	h := &preferencesHandler{hdlr}
	s.Handle(s.NewHandler(&Preferences{h}, opts...))
}

type preferencesHandler struct {
	PreferencesHandler
}

func (h *preferencesHandler) GetPreference(ctx context.Context, in *PreferenceRequest, out *PreferenceResponse) error {
	return h.PreferencesHandler.GetPreference(ctx, in, out)
}

func (h *preferencesHandler) GetPreferencesList(ctx context.Context, in *PreferencesListRequest, out *PreferencesListResponse) error {
	return h.PreferencesHandler.GetPreferencesList(ctx, in, out)
}
